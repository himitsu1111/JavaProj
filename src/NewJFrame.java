
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import java.util.*;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author One
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        label1 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analize");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("end \n dim Z < ");
        jScrollPane1.setViewportView(jTextArea1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable3);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable4);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane6.setViewportView(jTextArea2);

        label1.setText("Result:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public InnClass InnerClass() {
        return new InnClass();
    }
    Vector<Vector> vectorVNumTable = new Vector<>();
    Vector<Vector> vectorVPeremTable = new Vector<>();
    int countOfNumbersTbl3 = 1;
    int countOfPeremsTbl4 = 1;
    class InnClass extends TableColumn {
            TableColumn col = null;
            TableColumn col2 = null;
            TableColumn col3 = null;
            TableColumn col4 = null;



            
            ArrayList<ArrayList<Integer>> AL = new ArrayList<ArrayList<Integer>>();
            List<String> strIn = new ArrayList<String>();
            String[] columnNames = {"#", "Lexemi"};

            Object[][] data = {
                {1, "end"},
                {2, "to"},
                {3, "begin"},
                 {4, "if"},
                {5, "then"},
                {6, "step"},
                {7, "else"},
                {8, "for"},
                {9, "false"},
                {10, "next"},
                {11, "while"},
                {12, "true"},
                {13, "writeln"},
                {14, "readln"},
                {15, "integer"},
                {16, "real"},
                {17, "boolean"},
                {18, "dim"}
                    };

            String[] columnNames1 = {"#", "Razdelitel"};

            Object[][] data1 = {
                {1, "<"},
                {2, "||"},
                {3, ">"},
                {4, "<="},
                {5, ">="},
                {6, "<>"},
                {7, "+"},
                {8, "-"},
                {9, ")"},
                {10, "*"},
                {11, "/"},
                {12, "{"},
                {13, "}"},
                {14, "&&"},
                {15, ":="},
                {16, "("},
                {17, ":"},
                {18, "="},
                {19, ";"},
                {20, "!="},
                {21, "=="},
                {22, "&"}, 
                    };
            
            String[] columnNames2 = {"#", "Perem"};
            
            Object[][] data2 = null;
        //draw Table of numbers    
        public String insToData2(String str) {            
            
            Vector<String> vectorHeadOfNumTable = new Vector<>();
            vectorHeadOfNumTable.add("#");
            vectorHeadOfNumTable.add("Chislo");
            
            Vector<String> numbersOfTable = new Vector<>();

            numbersOfTable.add(new Integer(countOfNumbersTbl3++).toString());
            numbersOfTable.add(str);
            vectorVNumTable.add(numbersOfTable);
            
            JTable n2 = new JTable(vectorVNumTable, vectorHeadOfNumTable);
            
            jTable3.setModel(n2.getModel());
            jTable3.enable(false);
            col3 = jTable3.getColumnModel().getColumn(0);
            col3.setPreferredWidth(39); 
            
            
            return new Integer(countOfNumbersTbl3-1).toString();
        }
            
        public String insToData3(String str) {
            
            Vector<String> vectorHeadOfPeremTable = new Vector<>();
            vectorHeadOfPeremTable.add("#");
            vectorHeadOfPeremTable.add("Perem");
            
            Vector<String> peremsOfTable = new Vector<>();

            peremsOfTable.add(new Integer(countOfPeremsTbl4++).toString());
            peremsOfTable.add(str);
            vectorVPeremTable.add(peremsOfTable);
                        
            JTable n3 = new JTable(vectorVPeremTable, vectorHeadOfPeremTable);
            
            jTable4.setModel(n3.getModel());
            jTable4.enable(false);
            col3 = jTable4.getColumnModel().getColumn(0);
            col3.setPreferredWidth(39);
            return new Integer(countOfPeremsTbl4-1).toString();
        }    
            
        public void FillInTable() {
         
            JTable n1 = new JTable(data1, columnNames1);
            jTable2.setModel(n1.getModel());
            jTable2.enable(false);
            col2 = jTable2.getColumnModel().getColumn(0);
            col2.setPreferredWidth(39);

            JTable n = new JTable(data, columnNames);
            jTable1.setModel(n.getModel()); 
            jTable1.enable(false);
            col = jTable1.getColumnModel().getColumn(0);
            col.setPreferredWidth(30);
           
        }
    }
       
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       
            //map for 1 Table + iterator
            Map<Integer, String> columnMap1 = new TreeMap<Integer, String>();
            for (int i = 0; i < 18; i++)
                columnMap1.put(i+1, InnerClass().data[i][1].toString());
            
            
            //map for 2 Table + iterator
            Map<Integer, String> columnMap2 = new TreeMap<Integer, String>();
            for (int i = 0; i < 22; i++)
                columnMap2.put(i+1, InnerClass().data1[i][1].toString());

            //map for BeforeText + iterator 
            Map<Integer, String> beforeText = new TreeMap<Integer, String>();
            {
                int i=0;
                for (String s : jTextArea1.getText().split(" "))
                    beforeText.put(i++, s);
            }    

            Iterator<Map.Entry<Integer, String>> bt = beforeText.entrySet().iterator();
            String str = "";
            
            while (bt.hasNext()) {
                boolean mark = false;
                Iterator<Map.Entry<Integer, String>> cM1 = columnMap1.entrySet().iterator();
                Iterator<Map.Entry<Integer, String>> cM2 = columnMap2.entrySet().iterator();
                
                //map for 3 Table + iterator
                Map<Integer, String> columnMap3 = new TreeMap<Integer, String>();
                for (int i = 0; i < vectorVNumTable.size(); i++) {
                    //((Vector)rowData.elementAt(1)).elementAt(5);
                    String s = vectorVNumTable.elementAt(i).elementAt(1).toString();
                    columnMap3.put(i+1, s);
                }
                Iterator<Map.Entry<Integer, String>> cM3 = columnMap3.entrySet().iterator();
                
                //map for 4 Table + iterator
                Map<Integer, String> columnMap4 = new TreeMap<Integer, String>();
                for (int i = 0; i < vectorVPeremTable.size(); i++) {
                    //((Vector)rowData.elementAt(1)).elementAt(5);
                    String s = vectorVPeremTable.elementAt(i).elementAt(1).toString();
                    columnMap4.put(i+1, s);
                }
                Iterator<Map.Entry<Integer, String>> cM4 = columnMap4.entrySet().iterator();
                
                Map.Entry<Integer, String> s = bt.next();
                String ifhas = s.getValue();
                
                while (ifhas.equals("")) {
                    s = bt.next();
                    ifhas = s.getValue();
                }
                //check Table 1
                while (cM1.hasNext()) {

                    Map.Entry<Integer, String> me = cM1.next();
                    String test = me.getValue();
                
                    if (ifhas.equals(test)) {
                        str += "(1, " + me.getKey().toString() + "), ";
                        mark = true;
                        break;
                    }                
                }
                //check Table 2
                while (cM2.hasNext()) {
                    
                    Map.Entry<Integer, String> me = cM2.next();
                    String test = me.getValue();    
                
                    if (ifhas.equals(test)) {                                              
                        str += "(2, " + me.getKey().toString() + "), ";                        
                        mark = true;                       
                    }
                }              
                //check Table 3
                while (cM3.hasNext()) {
                
                    Map.Entry<Integer, String> me = cM3.next();
                    String test = me.getValue();

                    if (ifhas.equals(test)) {
                        str += "(3, " + me.getKey().toString() + "), ";
                        mark = true;
                    }                
                }          
                //check Table 4
                while (cM4.hasNext()) {
                
                    Map.Entry<Integer, String> me = cM4.next();
                    String test = me.getValue();

                    if (ifhas.equals(test)) {
                        str += "(4, " + me.getKey().toString() + "), ";
                        mark = true;
                    }                
                }
                //adding Numbers in Table 3
                if ((ifhas.charAt(0) >= 48) && (ifhas.charAt(0) <= 57) && (mark == false)) {
                    str += "(3, " + InnerClass().insToData2(ifhas) + "), ";
                }
                //adding Perems in Table 4
                if (((ifhas.charAt(0) >= 65) && (ifhas.charAt(0) <= 90) || 
                        (ifhas.charAt(0) >= 97) && (ifhas.charAt(0) <= 122)) && (mark == false)) {
                    str += "(4, " + InnerClass().insToData3(ifhas) + "), ";
                }
                //draw enters
                if ((ifhas.equals("\n"))) {
                    str += "\n";                    
                }    
            }           
            jTextArea2.setText(str);
            //The Grand Reset
            vectorVNumTable = new Vector<>();
            vectorVPeremTable = new Vector<>();
            countOfNumbersTbl3 = 1;
            countOfPeremsTbl4 = 1;
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewJFrame N = new NewJFrame();
                N.setVisible(true);
                NewJFrame.InnClass T = N.InnerClass();
                T.FillInTable();
   
            }         
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables
}
